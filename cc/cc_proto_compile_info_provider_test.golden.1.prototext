bazel_test_file: "cc/cc_proto_compile_bazel_test.go"
build_file: "cc/cc_proto_compile.BUILD"
bzl_file: "cc/cc_proto_compile.bzl"
deps_file: "cc/cc_proto_compile_deps.bzl"
json_file: "cc/cc_proto_compile.json"
name: "cc_proto_compile"
rule {
  bazelTestFilename: "bazel-out/{HOST_CONFIGURATION}/bin/cc/cc_proto_compile_bazel_test.go"
  bazelTestTmpl: "tools/protogen/bazel_test.go.tmpl"
  buildExampleFilename: "bazel-out/{HOST_CONFIGURATION}/bin/cc/cc_proto_compile.BUILD"
  buildExampleTmpl: "tools/protogen/BUILD.tmpl"
  depsFilename: "bazel-out/{HOST_CONFIGURATION}/bin/cc/cc_proto_compile_deps.bzl"
  depsTmpl: "tools/protogen/deps.bzl.tmpl"
  implementationFilename: "bazel-out/{HOST_CONFIGURATION}/bin/cc/cc_proto_compile.bzl"
  implementationTmpl: "tools/protogen/aspect.bzl.tmpl"
  kind: ""
  markdownFilename: "bazel-out/{HOST_CONFIGURATION}/bin/cc/cc_proto_compile.md"
  markdownTmpl: "tools/protogen/proto_rule.md.tmpl"
  name: "cc_proto_compile"
  package: "cc"
  plugins {
    exclusions: "google/protobuf"
    label: "//cc:cc_plugin"
    name: "cc_plugin"
    output_directory: false
    outputs: "{protopath}.pb.h"
    outputs: "{protopath}.pb.cc"
    protoc_plugin_name: "cpp"
    separate_options_flag: false
    tool: ""
    tool_executable: ""
    use_built_in_shell_environment: false
  }
  skipDirectoriesMerge: false
  workspaceExampleFilename: "bazel-out/{HOST_CONFIGURATION}/bin/cc/cc_proto_compile.WORKSPACE"
  workspaceExampleTmpl: "tools/protogen/WORKSPACE.tmpl"
}
workspace_file: "cc/cc_proto_compile.WORKSPACE"
