// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: example/routeguide/routeguide.proto

#include "example/routeguide/routeguide.pb.h"
#include "example/routeguide/routeguide.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace routeguide {

class MockRouteGuideStub : public RouteGuide::StubInterface {
 public:
  MOCK_METHOD3(GetFeature, ::grpc::Status(::grpc::ClientContext* context, const ::routeguide::Point& request, ::routeguide::Feature* response));
  MOCK_METHOD3(AsyncGetFeatureRaw, ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Feature>*(::grpc::ClientContext* context, const ::routeguide::Point& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetFeatureRaw, ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Feature>*(::grpc::ClientContext* context, const ::routeguide::Point& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(ListFeaturesRaw, ::grpc::ClientReaderInterface< ::routeguide::Feature>*(::grpc::ClientContext* context, const ::routeguide::Rectangle& request));
  MOCK_METHOD4(AsyncListFeaturesRaw, ::grpc::ClientAsyncReaderInterface< ::routeguide::Feature>*(::grpc::ClientContext* context, const ::routeguide::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncListFeaturesRaw, ::grpc::ClientAsyncReaderInterface< ::routeguide::Feature>*(::grpc::ClientContext* context, const ::routeguide::Rectangle& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(RecordRouteRaw, ::grpc::ClientWriterInterface< ::routeguide::Point>*(::grpc::ClientContext* context, ::routeguide::RouteSummary* response));
  MOCK_METHOD4(AsyncRecordRouteRaw, ::grpc::ClientAsyncWriterInterface< ::routeguide::Point>*(::grpc::ClientContext* context, ::routeguide::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncRecordRouteRaw, ::grpc::ClientAsyncWriterInterface< ::routeguide::Point>*(::grpc::ClientContext* context, ::routeguide::RouteSummary* response, ::grpc::CompletionQueue* cq));
  MOCK_METHOD1(RouteChatRaw, ::grpc::ClientReaderWriterInterface< ::routeguide::RouteNote, ::routeguide::RouteNote>*(::grpc::ClientContext* context));
  MOCK_METHOD3(AsyncRouteChatRaw, ::grpc::ClientAsyncReaderWriterInterface<::routeguide::RouteNote, ::routeguide::RouteNote>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD2(PrepareAsyncRouteChatRaw, ::grpc::ClientAsyncReaderWriterInterface<::routeguide::RouteNote, ::routeguide::RouteNote>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq));
};

} // namespace routeguide

