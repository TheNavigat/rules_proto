
ProtoCompilationInfo = provider(
    "The ProtoCompilation provider.  This is only used internally as a slightly stronger typed struct.",
    fields = {
        "actions": "<actions> The ctx.actions object",
        "protoc": "<File> The protoc executable.  This is expected to originate from a toolchain.",
        "verbose": "<int> A number for the verbosity level",
        "single_action": "<bool> A flag to indicate if plugins should be bundled in the same protoc invocation",
        "transitive": "<bool> A flag to indicate if transitive deps should also be compiled",
        "label": "<label> The ctx.label of the rule we are compiling",
        "full_outdir": "<string> The full output directory",
        "rel_outdir": "<string> The relative output directory",
        "output_directory_prefix": "<string> An optional prefix to use for the output directory",
        "bin_dir": "<string> the ctx.bin_dir where to place files",
        "plugins": "<list<ProtoPluginInfo>> the list of plugins to compile",
        "resolve_tools": "<function> The ctx.resolve_tools function",
        "proto_info": "<ProtoInfo> The proto_library provder struct for the thing we are compiling",
        "host_path_separator": "<string> The ctx.configuration.host_path_separator string",
        "transitive_outs": "<list<ProtoCompileOutputInfo>> The list of transitive info providers",
    },
)

ProtoCompileInputInfo = provider(
    "The input info needed to run a proto compile action",
    fields = {
        "actions": "<actions> The ctx.actions object",
        "args": "<list<string>> The list of arguments to the compiler",
        "input_manifests": "<list<File>> The list of plugin manifests",
        "inputs": "<list<File>> The list of inputs to the compiler",
        "output_directory": "<string> The full output directory where to emit files",
        "outputs": "<list<File>> The list of expected outputs",
        "protoc": "<File> The protoc executable.  This is expected to originate from a toolchain.",
        "tools": "<list<File>> The list of tools for the compiler action",
        "use_default_shell_env": "<bool> Whether to use the default shell environment",
        "verbose": "<int> A number for the verbosity level",
    },
)

ProtoCompileOutputInfo = provider(
    "The files generated by a proto compile invocation",
    fields = {
        "files": "The files generated by this aspect and its transitive dependencies, as a dict indexed by the root directory",
        "dirs": "The directories generated by this aspect and its transitive dependencies, as a depset",
    },
)

ProtoCompileInfo = provider(
    "The output files generated by a protoc infovocation",
    fields = {
    "label": "label object",
    "output_files": "The files generated by this rule, as a dict indexed by the root directory",
    "output_dirs": "The directories generated by this rule and its transitive dependencies, as a depset",
})

