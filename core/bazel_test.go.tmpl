// package main implements a bazel integration test for the {{ .Rule.Name }} rule.
//
// See https://github.com/bazelbuild/rules_go/commit/fabf03c1cd31bcf15fb945d932cef322b242be3a
package main

import (
	"testing"

	"github.com/bazelbuild/rules_go/go/tools/bazel_testing"
)

func TestMain(m *testing.M) {
	bazel_testing.TestMain(m, bazel_testing.Args{
		Main: txtar,
	})
}

func TestBuild(t *testing.T) {
	if err := bazel_testing.RunBazel("build", ":all"); err != nil {
		t.Fatal(err)
	}
}

var txtar = `
-- WORKSPACE --
local_repository(
    name = "build_stack_rules_proto",
    path = "../build_stack_rules_proto",
)

{{ template "WORKSPACE.tmpl" . }}
-- BUILD.bazel --
{{ template "BUILD.tmpl" . }}
-- foo.proto --
syntax = "proto3";

package thing.v1;

message Thing {
    string name = 1;
}
-- corp/greeter/v1/greeter.proto --
syntax = "proto3";

package corp.greeter.v1;

/ The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}
`
