package laze

import (
	"github.com/bazelbuild/bazel-gazelle/rule"
)

const protoRuleKind = "proto_rule"

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds.
func (p *plugin) Kinds() map[string]rule.KindInfo {
	return map[string]rule.KindInfo{
		protoRuleKind: {
			MatchAny: true,
			NonEmptyAttrs: map[string]bool{
				"deps": true,
				"srcs": true,
			},
			SubstituteAttrs: map[string]bool{},
			MergeableAttrs: map[string]bool{
				"srcs": true,
			},
			ResolveAttrs: map[string]bool{
				"deps": true,
			},
		},
	}
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
func (p *plugin) Loads() []rule.LoadInfo {
	return []rule.LoadInfo{
		{
			Name: "@build_stack_rules_proto//:rule.bzl",
			Symbols: []string{
				protoRuleKind,
			},
		},
	}
}
