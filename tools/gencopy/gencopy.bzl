load("@bazel_skylib//lib:shell.bzl", "shell")

gencopy_attrs = {
    "srcs": attr.label_list(
        doc = "The list of files that exist in the source tree.  This list is initially empty.",
        allow_files = True,
    ),
    "mode": attr.string(
        doc = "The gencopy mode.  For update, overwrite existing files.  For check, assert file equality",
        values = ["update", "check"],
        default = "check",
    ),
    # "target_label_name": attr.string(
    #     doc = "If defined, this string overrides the label.name of the target directory to generate files into",
    #     mandatory = True,
    # ),
    "update_target_label_name": attr.string(
        doc = "The label.name used to regenerate targets",
        mandatory = True,
    ),
    "_gencopy_script": attr.label(
        doc = "The gencopy script template",
        default = str(Label("//tools/gencopy:gencopy.bash.in")),
        allow_single_file = True,
    ),
    "_gencopy": attr.label(
        doc = "The gencopy binary",
        default = str(Label("//tools/gencopy")),
        allow_single_file = True,
        cfg = "host",
        executable = True,
    ),
}

def gencopy_config(ctx):
    return struct(
        mode = ctx.attr.mode,
        updateTargetLabelName = ctx.attr.update_target_label_name,
        targetLabel = str(ctx.label),
        targetPackage = ctx.label.package,
        generatedFiles = [],
        sourceFiles = [],
    )

def gencopy_action(ctx, config, outputs):
    script = ctx.actions.declare_file(ctx.label.name + ".bash")
    config_json = ctx.actions.declare_file(ctx.label.name + ".config.json")

    for f in outputs:
        config.generatedFiles.append(f.short_path)
    for f in ctx.files.srcs:
        config.sourceFiles.append(f.short_path)

    substitutions = {
        "@@GENCOPY_LABEL@@": shell.quote(str(ctx.attr._gencopy.label)),
        "@@GENCOPY_SHORT_PATH@@": shell.quote(ctx.executable._gencopy.short_path),
        "@@CONFIG_SHORT_PATH@@": shell.quote(config_json.short_path),
        "@@GENERATED_MESSAGE@@": """
# Generated by {label}
# DO NOT EDIT
""".format(label = str(ctx.label)),
        "@@RUNNER_LABEL@@": shell.quote(str(ctx.label)),
    }

    ctx.actions.write(
        output = config_json,
        content = config.to_json(),
    )

    ctx.actions.expand_template(
        template = ctx.file._gencopy_script,
        output = script,
        substitutions = substitutions,
        is_executable = True,
    )

    return script, ctx.runfiles(files = [ctx.executable._gencopy, config_json] + outputs + ctx.files.srcs)
